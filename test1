import React, { useState, useEffect } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend, AreaChart, Area, PieChart, Pie, Cell, ScatterChart, Scatter } from 'recharts';
import { ArrowUpRight, ArrowDownRight, DollarSign, TrendingUp, AlertTriangle, BarChart2, Activity, Droplet, Zap, Settings, HelpCircle, FileText } from 'lucide-react';

// Utility functions for generating mock data
const generateData = () => ({
  expectedPnL: (Math.random() * 2000000 + 1000000).toFixed(0),
  var95: (Math.random() * 500000 + 500000).toFixed(0),
  cvar95: (Math.random() * 300000 + 700000).toFixed(0),
  delta: (Math.random() * 0.5 + 0.5).toFixed(2),
  gamma: (Math.random() * 0.1).toFixed(3),
  vega: (Math.random() * 10000 + 5000).toFixed(0),
  theta: (-Math.random() * 1000 - 500).toFixed(0),
  rho: (Math.random() * 10000 - 5000).toFixed(0),
  rbobPrice: (Math.random() * 1 + 2).toFixed(3),
  butanePrice: (Math.random() * 0.5 + 1).toFixed(3),
  blendingVolume: (Math.random() * 50000 + 100000).toFixed(0),
});

const generateHistoricalData = () => {
  return Array(30).fill().map((_, i) => ({
    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    pnl: (Math.random() * 2000000 + 1000000).toFixed(0),
    rbobPrice: (Math.random() * 1 + 2).toFixed(2),
    butanePrice: (Math.random() * 0.5 + 1).toFixed(2),
  }));
};

const generatePnLDistribution = () => {
  return Array(20).fill().map((_, i) => ({
    pnl: (1000000 + i * 100000).toFixed(0),
    probability: Math.random() * 0.1,
  }));
};

const generateCorrelationData = () => {
  return [
    { name: 'RBOB', rbob: 1, butane: 0.7, rvo: -0.3, benzene: 0.2, sulfur: 0.1 },
    { name: 'Butane', rbob: 0.7, butane: 1, rvo: -0.2, benzene: 0.3, sulfur: 0.2 },
    { name: 'RVO', rbob: -0.3, butane: -0.2, rvo: 1, benzene: -0.1, sulfur: -0.1 },
    { name: 'Benzene', rbob: 0.2, butane: 0.3, rvo: -0.1, benzene: 1, sulfur: 0.4 },
    { name: 'Sulfur', rbob: 0.1, butane: 0.2, rvo: -0.1, benzene: 0.4, sulfur: 1 },
  ];
};

// Reusable components
const MetricCard = ({ title, value, icon, trend, trendDown }) => (
  <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
    <div className="flex items-center justify-between mb-4">
      <h3 className="text-lg font-semibold text-gray-300">{title}</h3>
      <div className="text-blue-400">{icon}</div>
    </div>
    <p className="text-3xl font-bold text-white mb-2">{value}</p>
    {trend && (
      <p className={`text-sm ${trendDown ? 'text-red-400' : 'text-green-400'} flex items-center`}>
        {trendDown ? <ArrowDownRight size={16} /> : <ArrowUpRight size={16} />}
        {trend}
      </p>
    )}
  </div>
);

const Dashboard = () => {
  const [data, setData] = useState(generateData());
  const [historicalData, setHistoricalData] = useState(generateHistoricalData());
  const [pnlDistribution, setPnlDistribution] = useState(generatePnLDistribution());
  const [correlationData, setCorrelationData] = useState(generateCorrelationData());

  useEffect(() => {
    const interval = setInterval(() => {
      setData(generateData());
      setHistoricalData(generateHistoricalData());
      setPnlDistribution(generatePnLDistribution());
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const getColor = (value) => {
    if (value === 1) return '#ffffff';
    const intensity = Math.abs(value) * 255;
    return value > 0 
      ? `rgb(0, ${intensity}, 0)`
      : `rgb(${intensity}, 0, 0)`;
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-8 font-sans">
      <div className="max-w-7xl mx-auto">
        <header className="flex justify-between items-center mb-8">
          <h1 className="text-4xl font-bold text-blue-400">Test Blending Operation Dashboard</h1>
          <nav className="flex space-x-4">
            <a href="#" className="text-gray-300 hover:text-white"><Settings size={24} /></a>
            <a href="#" className="text-gray-300 hover:text-white"><HelpCircle size={24} /></a>
            <a href="#" className="text-gray-300 hover:text-white"><FileText size={24} /></a>
          </nav>
        </header>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <MetricCard title="Expected PnL" value={`$${parseInt(data.expectedPnL).toLocaleString()}`} icon={<DollarSign />} trend="+5.3%" />
          <MetricCard title="VaR (95%)" value={`$${parseInt(data.var95).toLocaleString()}`} icon={<TrendingUp />} trend="-2.1%" trendDown />
          <MetricCard title="CVaR (95%)" value={`$${parseInt(data.cvar95).toLocaleString()}`} icon={<AlertTriangle />} trend="+0.8%" />
          <MetricCard title="Blending Volume" value={`${parseInt(data.blendingVolume).toLocaleString()} gal`} icon={<Droplet />} trend="+3.2%" />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
            <h2 className="text-2xl font-semibold mb-4 text-blue-400">Historical PnL and Prices</h2>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={historicalData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="date" stroke="#9CA3AF" />
                <YAxis yAxisId="left" stroke="#9CA3AF" />
                <YAxis yAxisId="right" orientation="right" stroke="#9CA3AF" />
                <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: 'none' }} />
                <Legend />
                <Line yAxisId="left" type="monotone" dataKey="pnl" stroke="#8884d8" name="PnL" />
                <Line yAxisId="right" type="monotone" dataKey="rbobPrice" stroke="#82ca9d" name="RBOB Price" />
                <Line yAxisId="right" type="monotone" dataKey="butanePrice" stroke="#ffc658" name="Butane Price" />
              </LineChart>
            </ResponsiveContainer>
          </div>
          <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
            <h2 className="text-2xl font-semibold mb-4 text-blue-400">PnL Distribution</h2>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={pnlDistribution}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="pnl" stroke="#9CA3AF" />
                <YAxis stroke="#9CA3AF" />
                <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: 'none' }} />
                <Bar dataKey="probability" fill="#60A5FA" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
            <h2 className="text-2xl font-semibold mb-4 text-blue-400">Option Greeks</h2>
            <div className="grid grid-cols-2 gap-4">
              <MetricCard title="Delta" value={data.delta} icon={<Activity size={20} />} />
              <MetricCard title="Gamma" value={data.gamma} icon={<Activity size={20} />} />
              <MetricCard title="Vega" value={data.vega} icon={<Activity size={20} />} />
              <MetricCard title="Theta" value={data.theta} icon={<Activity size={20} />} />
              <MetricCard title="Rho" value={data.rho} icon={<Activity size={20} />} />
            </div>
          </div>
          <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
            <h2 className="text-2xl font-semibold mb-4 text-blue-400">Correlation Heatmap</h2>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr>
                    <th className="px-2 py-1"></th>
                    {correlationData.map(item => (
                      <th key={item.name} className="px-2 py-1 text-sm">{item.name}</th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {correlationData.map(row => (
                    <tr key={row.name}>
                      <th className="px-2 py-1 text-sm text-left">{row.name}</th>
                      {Object.entries(row).filter(([key]) => key !== 'name').map(([key, value]) => (
                        <td 
                          key={key} 
                          className="px-2 py-1 text-center" 
                          style={{backgroundColor: getColor(value)}}
                        >
                          {value.toFixed(2)}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-700">
          <h2 className="text-2xl font-semibold mb-4 text-blue-400">Simulation Controls</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">Number of Simulations</label>
              <input type="number" className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white" defaultValue="10000" />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">Time Horizon (Days)</label>
              <input type="number" className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white" defaultValue="30" />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">Confidence Level</label>
              <select className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white">
                <option>95%</option>
                <option>99%</option>
              </select>
            </div>
          </div>
          <button className="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">Run Simulation</button>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
